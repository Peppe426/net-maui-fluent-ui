@page "/weather"
@using ExampleApp.Components.Layout
@inject IStringLocalizer<AppResource> Localizer

<h1>@Localizer["Weather"]</h1>

<p>@Localizer["ShowDataDemonstration"]</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{

    <FluentDataGrid Items="@forecasts" ShowHover="true" TGridItem="WeatherForecast">
        <PropertyColumn Property="@(p => p.Date)" Format="yyyy-MM-dd" Sortable="true" />
        <PropertyColumn Property="@(p => p.TemperatureC)" Sortable="true" />
        <PropertyColumn Property="@(p => p.TemperatureF)" Sortable="true" />
        <PropertyColumn Property="@(p => p.Summary)" Sortable="true" />
    </FluentDataGrid>
}

@code {
    private IQueryable<WeatherForecast>? forecasts;


    protected override async Task OnInitializedAsync()
    {
        try
        {

            MainLayout.ChangeTitle(AppResource.Weather);
            // Simulate asynchronous loading to demonstrate a loading indicator
            await Task.Delay(500);

            var startDate = DateOnly.FromDateTime(DateTime.Now);
            var summaries = new[] { "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching" };
            forecasts = Enumerable.Range(1, 5).Select(index => new WeatherForecast
                {
                    Date = startDate.AddDays(index),
                    TemperatureC = Random.Shared.Next(-20, 55),
                    Summary = summaries[Random.Shared.Next(summaries.Length)]
                }).AsQueryable();
        }
        catch (Exception ex)
        {

            throw;
        }
    }

    private class WeatherForecast
    {
        public DateOnly Date { get; set; }
        public int TemperatureC { get; set; }
        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
        public string? Summary { get; set; }
    }
}
